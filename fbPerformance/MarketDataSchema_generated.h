// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MARKETDATASCHEMA_MARKETDATASCHEMA_H_
#define FLATBUFFERS_GENERATED_MARKETDATASCHEMA_MARKETDATASCHEMA_H_

#include "include/flatbuffers/flatbuffers.h"


namespace marketDataSchema {

struct ContextData;
struct LevelData;
struct LevelInfoMessage;

MANUALLY_ALIGNED_STRUCT(8) ContextData FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t bookSequenceNumber_;
  uint64_t exchangeSequenceNumber_;
  uint64_t feedHandlerTime_;
  uint64_t exchangeTime_;

 public:
  ContextData(uint64_t bookSequenceNumber, uint64_t exchangeSequenceNumber, uint64_t feedHandlerTime, uint64_t exchangeTime)
    : bookSequenceNumber_(flatbuffers::EndianScalar(bookSequenceNumber)), exchangeSequenceNumber_(flatbuffers::EndianScalar(exchangeSequenceNumber)), feedHandlerTime_(flatbuffers::EndianScalar(feedHandlerTime)), exchangeTime_(flatbuffers::EndianScalar(exchangeTime)) { }

  uint64_t bookSequenceNumber() const { return flatbuffers::EndianScalar(bookSequenceNumber_); }
  uint64_t exchangeSequenceNumber() const { return flatbuffers::EndianScalar(exchangeSequenceNumber_); }
  uint64_t feedHandlerTime() const { return flatbuffers::EndianScalar(feedHandlerTime_); }
  uint64_t exchangeTime() const { return flatbuffers::EndianScalar(exchangeTime_); }
};
STRUCT_END(ContextData, 32);

MANUALLY_ALIGNED_STRUCT(8) LevelData FLATBUFFERS_FINAL_CLASS {
 private:
  double price_;
  uint64_t totalQty_;
  uint64_t numberOfOrders_;

 public:
  LevelData(double price, uint64_t totalQty, uint64_t numberOfOrders)
    : price_(flatbuffers::EndianScalar(price)), totalQty_(flatbuffers::EndianScalar(totalQty)), numberOfOrders_(flatbuffers::EndianScalar(numberOfOrders)) { }

  double price() const { return flatbuffers::EndianScalar(price_); }
  uint64_t totalQty() const { return flatbuffers::EndianScalar(totalQty_); }
  uint64_t numberOfOrders() const { return flatbuffers::EndianScalar(numberOfOrders_); }
};
STRUCT_END(LevelData, 24);

struct LevelInfoMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const ContextData *contextData() const { return GetStruct<const ContextData *>(4); }
  uint32_t sid() const { return GetField<uint32_t>(6, 0); }
  const LevelData *levelData() const { return GetStruct<const LevelData *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ContextData>(verifier, 4 /* contextData */) &&
           VerifyField<uint32_t>(verifier, 6 /* sid */) &&
           VerifyField<LevelData>(verifier, 8 /* levelData */) &&
           verifier.EndTable();
  }
};

struct LevelInfoMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_contextData(const ContextData *contextData) { fbb_.AddStruct(4, contextData); }
  void add_sid(uint32_t sid) { fbb_.AddElement<uint32_t>(6, sid, 0); }
  void add_levelData(const LevelData *levelData) { fbb_.AddStruct(8, levelData); }
  LevelInfoMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LevelInfoMessageBuilder &operator=(const LevelInfoMessageBuilder &);
  flatbuffers::Offset<LevelInfoMessage> Finish() {
    auto o = flatbuffers::Offset<LevelInfoMessage>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<LevelInfoMessage> CreateLevelInfoMessage(flatbuffers::FlatBufferBuilder &_fbb,
   const ContextData *contextData = 0,
   uint32_t sid = 0,
   const LevelData *levelData = 0) {
  LevelInfoMessageBuilder builder_(_fbb);
  builder_.add_levelData(levelData);
  builder_.add_sid(sid);
  builder_.add_contextData(contextData);
  return builder_.Finish();
}

inline const marketDataSchema::LevelInfoMessage *GetLevelInfoMessage(const void *buf) { return flatbuffers::GetRoot<marketDataSchema::LevelInfoMessage>(buf); }

inline bool VerifyLevelInfoMessageBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<marketDataSchema::LevelInfoMessage>(); }

inline void FinishLevelInfoMessageBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<marketDataSchema::LevelInfoMessage> root) { fbb.Finish(root); }

}  // namespace marketDataSchema

#endif  // FLATBUFFERS_GENERATED_MARKETDATASCHEMA_MARKETDATASCHEMA_H_
